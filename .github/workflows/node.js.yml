# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs: # Job 설정
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code. # Repo checkout
        uses: actions/checkout@v3

      - name: .env setting # .env 환경변수 등록
        run: |
          echo "REACT_APP_JS_KEY=${ secrets.REACT_APP_JS_KEY }}" >> $GITHUB_ENV
          echo "REACT_APP_REDIRECT_URI=${{ secrets.REACT_APP_REDIRECT_URI }}" >> $GITHUB_ENV

      - name: Install dependencies # 의존 파일 설치
        run: npm install

      - name: Generate build # React Build
        run: npm run build

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.TOKEN }}

      - name: Docker Image Build
        run: docker build --no-cache -t ${{ secrets.USERNAME }}/${{ secrets.PROJECT_NAME }} .

      - name: DockerHub Push
        run: docker push ${{ secrets.USERNAME }}/${{ secrets.PROJECT_NAME }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker stop ${{ secrets.APPLICATION_NAME }}
            docker rm ${{ secrets.APPLICATION_NAME }}
            docker rmi ${{ secrets.USERNAME }}/${{ secrets.PROJECT_NAME }}
            docker pull ${{ secrets.USERNAME }}/${{ secrets.PROJECT_NAME }}
            docker run --network=host -d -p ${{ secrets.DEPLOY_PORT }}:3000 -e TZ=Asia/Seoul --name ${{ secrets.APPLICATION_NAME }} ${{ secrets.USERNAME }}/${{ secrets.PROJECT_NAME }}
